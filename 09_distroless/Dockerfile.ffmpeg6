# syntax=docker/dockerfile:1.4
ARG baseimage="scratch"
FROM nixos/nix:latest AS BUILDER

RUN bash <<EOF 
#!/usr/bin/env bash
nix-channel --add https://nixos.org/channels/nixos-unstable nixos-unstable
nix-channel --update

#cat <<- HEREDOC > /etc/nix/nix.conf
#experimental-features = nix-command flakes
#HEREDOC
EOF

ARG NIX_FILE=./ffmpeg_6.nix 

WORKDIR /scratch
COPY $NIX_FILE .
RUN nix-build $NIX_FILE

# NOTE: Escape the \$ otherwise they are rendered at buildtime
COPY <<EOF /scratch/exportldd.sh
#!/usr/bin/env bash
# Make sure these are dynamically discovered
LDD_PROGRAM=$(find / -type f -executable -name "ldd" | head -n 1)
AWK_PROGRAM=$(find / -type f -executable -name "gawk" | head -n 1)
mkdir -p /output/libs /output/bin

while IFS=, read -r PROGRAM_FILE
do
    \${LDD_PROGRAM} "./result/bin/\$PROGRAM_FILE" > /scratch/libs.txt
    cat /scratch/libs.txt | \${AWK_PROGRAM} 'NF == 4 { {print \$3} }' > /scratch/libs_extracted.txt    
    cat /scratch/libs_extracted.txt | \${AWK_PROGRAM} -F/ -vOFS=/ '{ print \$1,\$2,\$3,\$4; }' | sort -u >> /scratch/libs_paths.txt
    cp "./result/bin/\$PROGRAM_FILE" /output/bin
done << PROGRAMS
ffmpeg
PROGRAMS

tar --ignore-failed-read --dereference -cvf /scratch/libraries.tar -T /scratch/libs_paths.txt
tar xf /scratch/libraries.tar --directory=/output/libs
# remove includes and manpages (add this once tested - reduces image by 45MB)
find /output -iname "share" -or -iname "include" -or -iname "example" | xargs rm -rf
EOF
RUN chmod +x /scratch/exportldd.sh && /scratch/exportldd.sh
CMD ["./output/bin/$PROGRAM_FILE", "-version"]

FROM $baseimage AS PRODUCTION

COPY --from=BUILDER /output/bin/ /usr/bin/
COPY --from=BUILDER /output/libs /

ENTRYPOINT [ "/usr/bin/ffmpeg" ]
CMD ["/usr/bin/ffmpeg", "-version"]